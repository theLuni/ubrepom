import os
from telethon import TelegramClient, events
from telethon.tl.functions.photos import UploadProfilePhotoRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_ID = 24755102  # –í–∞—à API ID
API_HASH = "fb23dc1caeb3349abb5e0ebcdafc0bcf"  # –í–∞—à API HASH
SESSION_NAME = 'userbot'
OWNER_ID = 5929120983
ALLOWED_ID = 5621656618

client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

async def send_notification():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç"""
    await client.send_message(ALLOWED_ID, "‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@client.on(events.NewMessage(incoming=True))
async def message_handler(event):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π —á–∞—Ç
    if event.sender_id == ALLOWED_ID and event.chat_id == OWNER_ID:
        
        # –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–º–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∫–∏
        if event.message.text == '.setavatar':
            if not event.is_reply:
                await event.reply("‚ùå –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ!")
                return
            
            reply = await event.get_reply_message()
            if not reply.photo:
                await event.reply("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ!")
                return
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—É
                photo = await reply.download_media(file='avatar.jpg')
                await client(UploadProfilePhotoRequest(
                    file=await client.upload_file(photo)
                ))
                await send_notification()
                await event.reply("‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            finally:
                if os.path.exists(photo):
                    os.remove(photo)

async def main():
    await client.start()
    print("üîç –Æ–∑–µ—Ä–±–æ—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞...")
    await client.run_until_disconnected()

if __name__ == '__main__':
    client.loop.run_until_complete(main())